{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravin\\\\OneDrive\\\\Desktop\\\\Event_Management_Platform\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password, userType) => {\n    try {\n      // Mock authentication - in real app, make API call\n      const mockUsers = {\n        admin: {\n          id: '1',\n          name: 'Admin User',\n          email: 'admin@campus.edu',\n          type: 'admin',\n          college_id: '1'\n        },\n        student: {\n          id: '2',\n          name: 'John Doe',\n          email: 'john.doe@campus.edu',\n          type: 'student',\n          college_id: '1'\n        }\n      };\n\n      // Simple mock validation\n      if (email === 'admin@campus.edu' && password === 'admin123') {\n        const userData = mockUsers.admin;\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          success: true,\n          user: userData\n        };\n      } else if (email === 'student@campus.edu' && password === 'student123') {\n        const userData = mockUsers.student;\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid credentials'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","userType","mockUsers","admin","id","name","type","college_id","student","userData","setItem","stringify","success","error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ravin/OneDrive/Desktop/Event_Management_Platform/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user data on app load\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password, userType) => {\r\n    try {\r\n      // Mock authentication - in real app, make API call\r\n      const mockUsers = {\r\n        admin: {\r\n          id: '1',\r\n          name: 'Admin User',\r\n          email: 'admin@campus.edu',\r\n          type: 'admin',\r\n          college_id: '1'\r\n        },\r\n        student: {\r\n          id: '2',\r\n          name: 'John Doe',\r\n          email: 'john.doe@campus.edu',\r\n          type: 'student',\r\n          college_id: '1'\r\n        }\r\n      };\r\n\r\n      // Simple mock validation\r\n      if (email === 'admin@campus.edu' && password === 'admin123') {\r\n        const userData = mockUsers.admin;\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { success: true, user: userData };\r\n      } else if (email === 'student@campus.edu' && password === 'student123') {\r\n        const userData = mockUsers.student;\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { success: true, user: userData };\r\n      } else {\r\n        return { success: false, error: 'Invalid credentials' };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}