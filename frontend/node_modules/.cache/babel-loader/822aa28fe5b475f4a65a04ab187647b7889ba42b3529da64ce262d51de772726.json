{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravin\\\\OneDrive\\\\Desktop\\\\Event_Management_Platform\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password, userType) => {\n    try {\n      // Admin authentication - fetch real admin data from API\n      if (userType === 'admin') {\n        try {\n          const response = await fetch('http://localhost:5000/api/admins/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email\n            })\n          });\n          if (response.ok) {\n            const data = await response.json();\n            // Simple password validation (in real app, this would be done on backend)\n            if (password === 'admin123') {\n              const userData = {\n                ...data.admin,\n                type: 'admin',\n                college: data.college\n              };\n              setUser(userData);\n              localStorage.setItem('user', JSON.stringify(userData));\n              return {\n                success: true,\n                user: userData\n              };\n            } else {\n              return {\n                success: false,\n                error: 'Invalid password'\n              };\n            }\n          } else {\n            return {\n              success: false,\n              error: 'Admin not found'\n            };\n          }\n        } catch (apiError) {\n          return {\n            success: false,\n            error: 'Failed to verify admin credentials'\n          };\n        }\n      }\n\n      // Student authentication - fetch real student data from API\n      if (userType === 'student') {\n        try {\n          const response = await fetch(`http://localhost:5000/api/students?email=${encodeURIComponent(email)}`);\n          if (response.ok) {\n            const studentData = await response.json();\n            // Simple password validation (in real app, this would be done on backend)\n            if (password === 'student123') {\n              const userData = {\n                ...studentData,\n                type: 'student'\n              };\n              setUser(userData);\n              localStorage.setItem('user', JSON.stringify(userData));\n              return {\n                success: true,\n                user: userData\n              };\n            } else {\n              return {\n                success: false,\n                error: 'Invalid password'\n              };\n            }\n          } else {\n            // If specific student not found, try to get any student for demo purposes\n            if (email === 'student@campus.edu') {\n              try {\n                const allStudentsResponse = await fetch('http://localhost:5000/api/students');\n                if (allStudentsResponse.ok) {\n                  const allStudents = await allStudentsResponse.json();\n                  if (allStudents.length > 0 && password === 'student123') {\n                    const firstStudent = allStudents[0];\n                    const userData = {\n                      ...firstStudent,\n                      type: 'student',\n                      email: 'student@campus.edu',\n                      // Keep the login email\n                      name: 'Demo Student'\n                    };\n                    setUser(userData);\n                    localStorage.setItem('user', JSON.stringify(userData));\n                    return {\n                      success: true,\n                      user: userData\n                    };\n                  }\n                }\n              } catch (fallbackError) {\n                console.error('Fallback authentication failed:', fallbackError);\n              }\n            }\n            return {\n              success: false,\n              error: 'Student not found'\n            };\n          }\n        } catch (apiError) {\n          return {\n            success: false,\n            error: 'Failed to verify student credentials'\n          };\n        }\n      }\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  };\n  const registerStudent = async studentData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/students/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(studentData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          student: data.student\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    }\n  };\n  const registerAdmin = async adminData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/admins/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(adminData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          admin: data.admin\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    registerStudent,\n    registerAdmin,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","userType","response","fetch","method","headers","body","stringify","ok","data","json","userData","admin","type","college","setItem","success","error","apiError","encodeURIComponent","studentData","allStudentsResponse","allStudents","length","firstStudent","name","fallbackError","console","registerStudent","student","registerAdmin","adminData","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ravin/OneDrive/Desktop/Event_Management_Platform/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user data on app load\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password, userType) => {\r\n    try {\r\n      // Admin authentication - fetch real admin data from API\r\n      if (userType === 'admin') {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/api/admins/login', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email }),\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            // Simple password validation (in real app, this would be done on backend)\r\n            if (password === 'admin123') {\r\n              const userData = {\r\n                ...data.admin,\r\n                type: 'admin',\r\n                college: data.college\r\n              };\r\n              setUser(userData);\r\n              localStorage.setItem('user', JSON.stringify(userData));\r\n              return { success: true, user: userData };\r\n            } else {\r\n              return { success: false, error: 'Invalid password' };\r\n            }\r\n          } else {\r\n            return { success: false, error: 'Admin not found' };\r\n          }\r\n        } catch (apiError) {\r\n          return { success: false, error: 'Failed to verify admin credentials' };\r\n        }\r\n      }\r\n      \r\n      // Student authentication - fetch real student data from API\r\n      if (userType === 'student') {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/api/students?email=${encodeURIComponent(email)}`);\r\n          if (response.ok) {\r\n            const studentData = await response.json();\r\n            // Simple password validation (in real app, this would be done on backend)\r\n            if (password === 'student123') {\r\n              const userData = {\r\n                ...studentData,\r\n                type: 'student'\r\n              };\r\n              setUser(userData);\r\n              localStorage.setItem('user', JSON.stringify(userData));\r\n              return { success: true, user: userData };\r\n            } else {\r\n              return { success: false, error: 'Invalid password' };\r\n            }\r\n          } else {\r\n            // If specific student not found, try to get any student for demo purposes\r\n            if (email === 'student@campus.edu') {\r\n              try {\r\n                const allStudentsResponse = await fetch('http://localhost:5000/api/students');\r\n                if (allStudentsResponse.ok) {\r\n                  const allStudents = await allStudentsResponse.json();\r\n                  if (allStudents.length > 0 && password === 'student123') {\r\n                    const firstStudent = allStudents[0];\r\n                    const userData = {\r\n                      ...firstStudent,\r\n                      type: 'student',\r\n                      email: 'student@campus.edu', // Keep the login email\r\n                      name: 'Demo Student'\r\n                    };\r\n                    setUser(userData);\r\n                    localStorage.setItem('user', JSON.stringify(userData));\r\n                    return { success: true, user: userData };\r\n                  }\r\n                }\r\n              } catch (fallbackError) {\r\n                console.error('Fallback authentication failed:', fallbackError);\r\n              }\r\n            }\r\n            return { success: false, error: 'Student not found' };\r\n          }\r\n        } catch (apiError) {\r\n          return { success: false, error: 'Failed to verify student credentials' };\r\n        }\r\n      }\r\n      \r\n      return { success: false, error: 'Invalid credentials' };\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const registerStudent = async (studentData) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/students/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(studentData),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        return { success: true, student: data.student };\r\n      } else {\r\n        return { success: false, error: data.error };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Registration failed' };\r\n    }\r\n  };\r\n\r\n  const registerAdmin = async (adminData) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/admins/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(adminData),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        return { success: true, admin: data.admin };\r\n      } else {\r\n        return { success: false, error: data.error };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Registration failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    registerStudent,\r\n    registerAdmin,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}