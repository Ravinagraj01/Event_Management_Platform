{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravin\\\\OneDrive\\\\Desktop\\\\Event_Management_Platform\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password, userType) => {\n    try {\n      // Admin authentication (mock)\n      if (email === 'admin@campus.edu' && password === 'admin123') {\n        const userData = {\n          id: '1',\n          name: 'Admin User',\n          email: 'admin@campus.edu',\n          type: 'admin',\n          college_id: '1'\n        };\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          success: true,\n          user: userData\n        };\n      }\n\n      // Student authentication - fetch real student data from API\n      if (userType === 'student') {\n        try {\n          const response = await fetch(`http://localhost:5000/api/students?email=${encodeURIComponent(email)}`);\n          if (response.ok) {\n            const studentData = await response.json();\n            // Simple password validation (in real app, this would be done on backend)\n            if (password === 'student123') {\n              const userData = {\n                ...studentData,\n                type: 'student'\n              };\n              setUser(userData);\n              localStorage.setItem('user', JSON.stringify(userData));\n              return {\n                success: true,\n                user: userData\n              };\n            } else {\n              return {\n                success: false,\n                error: 'Invalid password'\n              };\n            }\n          } else {\n            return {\n              success: false,\n              error: 'Student not found'\n            };\n          }\n        } catch (apiError) {\n          return {\n            success: false,\n            error: 'Failed to verify student credentials'\n          };\n        }\n      }\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","userType","userData","id","name","type","college_id","setItem","stringify","success","response","fetch","encodeURIComponent","ok","studentData","json","error","apiError","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ravin/OneDrive/Desktop/Event_Management_Platform/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user data on app load\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password, userType) => {\r\n    try {\r\n      // Admin authentication (mock)\r\n      if (email === 'admin@campus.edu' && password === 'admin123') {\r\n        const userData = {\r\n          id: '1',\r\n          name: 'Admin User',\r\n          email: 'admin@campus.edu',\r\n          type: 'admin',\r\n          college_id: '1'\r\n        };\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { success: true, user: userData };\r\n      }\r\n      \r\n      // Student authentication - fetch real student data from API\r\n      if (userType === 'student') {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/api/students?email=${encodeURIComponent(email)}`);\r\n          if (response.ok) {\r\n            const studentData = await response.json();\r\n            // Simple password validation (in real app, this would be done on backend)\r\n            if (password === 'student123') {\r\n              const userData = {\r\n                ...studentData,\r\n                type: 'student'\r\n              };\r\n              setUser(userData);\r\n              localStorage.setItem('user', JSON.stringify(userData));\r\n              return { success: true, user: userData };\r\n            } else {\r\n              return { success: false, error: 'Invalid password' };\r\n            }\r\n          } else {\r\n            return { success: false, error: 'Student not found' };\r\n          }\r\n        } catch (apiError) {\r\n          return { success: false, error: 'Failed to verify student credentials' };\r\n        }\r\n      }\r\n      \r\n      return { success: false, error: 'Invalid credentials' };\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}